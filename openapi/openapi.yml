openapi: "3.0.2"

info: 
  title: "e-pryomka"
  description: "An automated system for entrant application to FICT, KPI."
  version: "0.0.1"
  contact:
    name: "GitHub"
    url: "https://github.com/fictadvisor/e-pryomka"
  license: 
    name: "GNU General Public License v3.0"
    url: "https://github.com/fictadvisor/e-pryomka/blob/main/LICENSE"

servers:
  - url: "https://fict.bar"
  - url: "http://localhost:8080"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LogInRequestDto:
      type: "object"
      properties:
        login:
          type: "string"
        password:
          type: "string"
      required: ["login", "password"]

    LogInResponseDto:
      type: "object"
      properties:
        access:
          type: "string"
        refresh:
          type: "string"
      required: ["access", "refresh"]

    RefreshRequest:
      type: "object"
      properties:
        refresh:
          type: "string"
      required: ["refresh"]

    TelegramAuthData:
      type: "object"
      properties:
        id:
          type: "number"
        first_name:
          type: "string"
        last_name:
          type: "string"
          nullable: true
        user_name:
          type: "string"
          nullable: true
        photo_url:
          type: "string"
          nullable: true
        hash:
          type: "string"
      required: ["id", "first_name", "hash"]

    WhoAmIDto:
      type: "object"
      properties:
        id:
          type: "string"
        name:
          type: "string"
        role:
          type: "string"
          enum: ["Operator", "Admin"]
          nullable: true
        photoUrl:
          type: "string"
          nullable: true
      required: ["id", "name"]

    UserDto:
      type: "object"
      properties:
        id:
          type: string
        name:
          type: string
      required: [id, name]

    UserListDto:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/UserDto"
      required: [users]

    CreateOperatorDto:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
      required: [login, password]

    Speciality:
      type: string
      enum:
        - SPEC_121
        - SPEC_123
        - SPEC_126

    Funding:
      type: string
      enum:
        - Budget
        - Contract

    LearningFormat:
      type: string
      enum:
        - FullTime
        - PartTime

    DocumentType:
      type: string
      enum:
        - Passport
        - Photo
        - Contract

    ApplicationStatus:
      type: string
      enum:
        - Preparing
        - Pending
        - InReview
        - Approved
        - Rejected
        - Cancelled

    ChangeApplicationStatusDto:
      type: "object"
      properties:
        status:
          $ref: "#/components/schemas/ApplicationStatus"
        status_message:
          type: string
          nullable: true
      required: [status]

    ApplicationRequestDto:
      type: object
      properties:
        speciality:
          $ref: "#/components/schemas/Speciality"
        funding:
          $ref: "#/components/schemas/Funding"
        learning_format:
          $ref: "#/components/schemas/LearningFormat"
      required: [speciality, funding, learning_format]

    ApplicationResponseDto:
      type: object
      properties:
        id:
          type: string
        documents:
          type: array
          items:
            $ref: "#/components/schemas/DocumentType"
        speciality:
          $ref: "#/components/schemas/Speciality"
        funding:
          $ref: "#/components/schemas/Funding"
        learning_format:
          $ref: "#/components/schemas/LearningFormat"
        created_at:
          type: string
        status:
          $ref: "#/components/schemas/ApplicationStatus"
        status_message:
          type: string
          nullable: true
      required: [id, documents, speciality, funding, learning_format, created_at, status]

    ApplicationListDto:
      type: object
      properties:
        applications:
          type: array
          items:
            $ref: "#/components/schemas/ApplicationResponseDto"
      required: [applications]


  parameters:
    id_in_path:
      name: id
      required: true
      in: path
      schema:
        type: string
    query_document_type:
      name: type
      required: true
      in: query
      schema:
        $ref: "#/components/schemas/DocumentType"

  examples:
    operatorResponseExample:
      value:
        id: "30b00eac-6e5b-4263-aef3-bde3140d7eb6"
        name: "operator1"
        role: "Operator"
        photoUrl: null

    operatorLoginRequestExample:
      value:
        login: "operator1"
        password: "password123"

    authResponseExample:
      value:
        access: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJodHRwczovL3ZzdHVwLmZpY3RhZHZpc29yLmNvbS9hcGkvIiwidXNlcl9pZCI6ImUxNGNmZGZmLTM1ZTEtNGNlYi05NzgwLTkyMDYxNjEwMjU3MiIsImlzcyI6Imh0dHBzOi8vdnN0dXAuZmljdGFkdmlzb3IuY29tLyIsImV4cCI6MTY0NTM0OTY0NH0.rxLeRplrgsl8VfSNZHqQegBdvPSGSFFpGcQmKN9bN8c"
        refresh: "t5hsSBhlpS6fVu92go4liGbthT3ta6frmexqLaT674g="

    refreshRequestExample:
      value:
        refresh: "t5hsSBhlpS6fVu92go4liGbthT3ta6frmexqLaT674g="

    telegramDataExample:
      value:
        id: 100500
        first_name: "test"
        last_name: "test"
        user_name: "croc"
        hash: "e5dddc989e053723a9c346535d1324cbc26b2a7df86e106b6f6a7d286a69f7d1"

    newApplicationResponseExample:
      value:
        id: "30b00eac-6e5b-4263-aef3-bde3140d7eb6"
        documents: []
        speciality: "SPEC_121"
        funding: "Budget"
        learning_format: "FullTime"
        createdAt: "2022-02-20T14:35:22.558884Z"
        status: "Preparing"
        statusMessage: null

    filledApplicationResponseExample:
      value:
        id: "30b00eac-6e5b-4263-aef3-bde3140d7eb6"
        documents: ["Passport", "Photo", "Contract"]
        speciality: "SPEC_123"
        funding: "Budget"
        learning_format: "FullTime"
        createdAt: "2022-02-20T14:35:22.558884Z"
        status: "InReview"
        statusMessage: null

    rejectedApplicationResponseExample:
      value:
        id: "30b00eac-6e5b-4263-aef3-bde3140d7eb6"
        documents: ["Passport", "Photo", "Contract"]
        speciality: "SPEC_126"
        funding: "Contract"
        learning_format: "FullTime"
        createdAt: "2022-02-20T14:35:22.558884Z"
        status: "Rejected"
        statusMessage: "Rejected because of invalid documents"

    applicationListResponseExample:
      value:
        applications:
          - id: "30b00eac-6e5b-4263-aef3-bde3140d7eb6"
            documents: [ ]
            speciality: "SPEC_121"
            funding: "Budget"
            learning_format: "FullTime"
            createdAt: "2022-02-20T14:35:22.558884Z"
            status: "Preparing"
            statusMessage: null
          - id: "30b00eac-6e5b-4263-aef3-bde3140d7eb6"
            documents: [ "Passport", "Photo", "Contract" ]
            speciality: "SPEC_123"
            funding: "Budget"
            learning_format: "FullTime"
            createdAt: "2022-02-20T14:35:22.558884Z"
            status: "InReview"
            statusMessage: null
          - id: "30b00eac-6e5b-4263-aef3-bde3140d7eb6"
            documents: [ "Passport", "Photo", "Contract" ]
            speciality: "SPEC_126"
            funding: "Contract"
            learning_format: "FullTime"
            createdAt: "2022-02-20T14:35:22.558884Z"
            status: "Rejected"
            statusMessage: "Rejected because of invalid documents"
    emptyApplicationListResponseExample:
      value:
        applications: []
    approveApplicationExample:
      value:
        status: "Approved"
    rejectApplicationExample:
      value:
        status: "Rejected"
        status_message: "Rejected because of invalid documents"

security:
  - bearerAuth: []

paths:
  /:
    get:
      tags:
        - Misc
      summary: "Hello world endpoint"
      security: []
      responses:
        200:
          description: "Successful response"
          content:
            text/plain:
              example: "üßë‚ÄçüíªWelcome to FICT!üöÄ"

  /me:
    get:
      tags:
        - Misc
      summary: "General info about current user"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WhoAmIDto'
              examples:
                operatorResponseExample:
                  $ref: '#/components/examples/operatorResponseExample'
        401:
          description: "Authentication failed"

  /login:
    post: 
      tags:
        - Auth
      summary: "Login with username and password"
      description: "Login router for administrators and operators."
      security: []
      requestBody:
        required: true
        content:
          application/json:
              schema:
                $ref: '#/components/schemas/LogInRequestDto'
              examples:
                operatorLoginRequestExample:
                  $ref: '#/components/examples/operatorLoginRequestExample'
      responses:
        200:
          description: "Successful response contains JWT access token and refresh token."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogInResponseDto'
              examples:
                authResponseExample:
                  $ref: '#/components/examples/authResponseExample'
        401:
          description: "Authentication failed. Login or password is invalid."

  /refresh:
    post: 
      tags:
        - Auth
      summary: "Refresh tokens"
      description: "Router for all users to renew their access and refresh tokens."
      security: []
      requestBody:
        required: true
        content:
          application/json:
              schema:
                $ref: '#/components/schemas/RefreshRequest'
              examples:
                refreshRequestExample:
                  $ref: '#components/examples/refreshRequestExample'
      responses:
        200:
          description: "Successful response contains JWT access token and refresh token."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogInResponseDto'
              examples:
                authResponseExample:
                  $ref: '#/components/examples/authResponseExample'
        401:
          description: "Authentication failed. Refesh token is not valid."

  /exchange:
    post: 
      tags:
        - Auth
      summary: "Exchange Telegram Auth data to e-pryomka tokens"
      description: "Router for entrants that log in via Telegram. Creates user if it is not registered yet. Returs access & refresh tokens"
      security: []
      requestBody:
        required: true
        content:
          application/json:
              schema:
                $ref: '#/components/schemas/TelegramAuthData'
              examples:
                telegramDataExample:
                  $ref: '#/components/examples/telegramDataExample'
      responses:
        200:
          description: "Successful response contains JWT access token and refresh token."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogInResponseDto'
              examples:
                authResponseExample:
                  $ref: '#/components/examples/authResponseExample'
        401:
          description: "Authentication failed. Refesh token is not valid."

  /applications:
    get:
      tags: [Applications]
      summary: "Get all applications"
      description: "This endpoint can be used only by staff"
      responses:
        200:
          description: "List of applications"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationListDto'
              examples:
                applicationListResponseExample:
                  $ref: '#/components/examples/applicationListResponseExample'
                emptyApplicationListResponseExample:
                  $ref: '#/components/examples/emptyApplicationListResponseExample'

  /applications/my:
    get:
      tags: [Applications]
      summary: "Get application info"
      description: "This endpoint can be used only by entrant. Returns detailed info about application"
      responses:
        200:
          description: "Detailed application info"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationResponseDto'
              examples:
                "New Application":
                  $ref: '#/components/examples/newApplicationResponseExample'
                "Filled Application":
                  $ref: '#/components/examples/filledApplicationResponseExample'
                "Rejected Application":
                  $ref: '#/components/examples/rejectedApplicationResponseExample'
        400:
          description: "Invalid application id"
          content:
            text/plain:
              example: "Invalid application id"
        401:
          description: "Authorization failed"
        404:
          description: "Application not found"

  /applications/{id}:
    get:
      tags: [Applications]
      summary: "Get application info"
      description: "This endpoint can be used only by staff. Returns detailed info about application"
      parameters:
        - $ref: "#components/parameters/id_in_path"
      responses:
        200:
          description: "Detailed application info"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationResponseDto'
              examples:
                "New Application":
                  $ref: '#/components/examples/newApplicationResponseExample'
                "Filled Application":
                  $ref: '#/components/examples/filledApplicationResponseExample'
                "Rejected Application":
                  $ref: '#/components/examples/rejectedApplicationResponseExample'
        400:
          description: "Invalid application id"
          content:
            text/plain:
              example: "Invalid application id"
        401:
          description: "Authorization failed"
        404:
          description: "Application not found"

    put:
      tags: [ Applications ]
      summary: "Update application status"
      description: "This endpoint can be used by both entrants and staff to update application message. In case of rejection, additional message can be provided"
      parameters:
        - $ref: "#components/parameters/id_in_path"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeApplicationStatusDto'
            examples:
              "Approve application":
                $ref: '#/components/examples/approveApplicationExample'
              "Reject application":
                $ref: '#/components/examples/rejectApplicationExample'

      responses:
        200:
          description: "Status updated successfully"
        400:
          description: "Invalid application id"
          content:
            text/plain:
              example: "Invalid application id"
        401:
          description: "Authentication failed"
        403:
          description: "User has not enough privileges to perform this action"
          content:
            text/plain:
              example: "User has not enough privileges to perform this action"
        404:
          description: "Application not found"
          content:
            text/plain:
              example: "Application not found"

  /applications/{id}/documents:
    get:
      tags: [Applications]
      summary: "Get application info"
      description: "This endpoint can be used only by staff. Returns detailed info about application"
      parameters:
        - $ref: "#components/parameters/id_in_path"
        - $ref: "#components/parameters/query_document_type"
      responses:
        200:
          description: "File to download"
        400:
          description: "Invalid application id or document type"
          content:
            text/plain:
              example: "Invalid application id"
    post:
      tags: [Applications]
      summary: "Add document to application"
      description: "This endpoint can be used by entrants to add documents to their applications."
      parameters:
        - $ref: "#components/parameters/id_in_path"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                FileType:
                  $ref: "#/components/schemas/DocumentType"
                File:
                  type: string
                  format: binary
      responses:
        200:
          description: "File uploaded successfully"
        400:
          description: "Bad request"
          content:
            text/plain:
              example: "File name is not provided"
        401:
          description: "Authentication failed"
        404:
          description: "Application not found"


  /operators:
    get:
      tags: [Operators]
      summary: "List of registered operators"
      description: "This route requires admin privileges"
      responses:
        200:
          description: "List of operators obtained"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserListDto"
              example:
                users:
                  - id: "30b00eac-6e5b-4263-aef3-bde3140d7eb6"
                    name: "operator1"
                  - id: "00b00eac-9e5b-4103-bbf3-bdeed4021e21"
                    name: "operator2"
        401:
          description: "Authentication failed"
    post:
      tags: [Operators]
      summary: "Register an operator"
      description: "This route requires admin privileges"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOperatorDto'
            example:
              login: "operator1"
              password: "password123"
      responses:
        200:
          description: "Operator registered"
        400:
          description: "Invalid parameters"
        409:
          description: "Operator already exists"
          content:
            text/plain:
              example: "Operator already exists"

  /operators/{id}:
    delete:
      tags: [Operators]
      summary: "Delete an operator"
      description: "This route requires admin privileges"
      parameters:
        - $ref: "#/components/parameters/id_in_path"
      responses:
        200:
          description: "Operator deleted"
        400:
          description: "Invalid id"
        401:
          description: "Authentication failed"
        404:
          description: "Operator not found"
